/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {TransactionOverrides, TypedEventDescription, TypedFunctionDescription} from "./types"


interface BridgeInterface extends Interface {
  functions: {
    DEFAULT_ADMIN_ROLE: TypedFunctionDescription<{ encode([]: []): string }>;

    MAX_RELAYERS: TypedFunctionDescription<{ encode([]: []): string }>;

    RELAYER_ROLE: TypedFunctionDescription<{ encode([]: []): string }>;

    _chainID: TypedFunctionDescription<{ encode([]: []): string }>;

    _depositCounts: TypedFunctionDescription<{
      encode([]: [BigNumberish]): string;
    }>;

    _expiry: TypedFunctionDescription<{ encode([]: []): string }>;

    _fee: TypedFunctionDescription<{ encode([]: []): string }>;

    _relayerThreshold: TypedFunctionDescription<{ encode([]: []): string }>;

    _resourceIDToHandlerAddress: TypedFunctionDescription<{
      encode([]: [Arrayish]): string;
    }>;

    getRoleAdmin: TypedFunctionDescription<{
      encode([role]: [Arrayish]): string;
    }>;

    getRoleMember: TypedFunctionDescription<{
      encode([role, index]: [Arrayish, BigNumberish]): string;
    }>;

    getRoleMemberCount: TypedFunctionDescription<{
      encode([role]: [Arrayish]): string;
    }>;

    getRoleMemberIndex: TypedFunctionDescription<{
      encode([role, account]: [Arrayish, string]): string;
    }>;

    grantRole: TypedFunctionDescription<{
      encode([role, account]: [Arrayish, string]): string;
    }>;

    hasRole: TypedFunctionDescription<{
      encode([role, account]: [Arrayish, string]): string;
    }>;

    paused: TypedFunctionDescription<{ encode([]: []): string }>;

    renounceRole: TypedFunctionDescription<{
      encode([role, account]: [Arrayish, string]): string;
    }>;

    revokeRole: TypedFunctionDescription<{
      encode([role, account]: [Arrayish, string]): string;
    }>;

    _hasVotedOnProposal: TypedFunctionDescription<{
      encode([destNonce, dataHash, relayer]: [
        BigNumberish,
        Arrayish,
        string
      ]): string;
    }>;

    isRelayer: TypedFunctionDescription<{
      encode([relayer]: [string]): string;
    }>;

    renounceAdmin: TypedFunctionDescription<{
      encode([newAdmin]: [string]): string;
    }>;

    adminPauseTransfers: TypedFunctionDescription<{ encode([]: []): string }>;

    adminUnpauseTransfers: TypedFunctionDescription<{ encode([]: []): string }>;

    adminChangeRelayerThreshold: TypedFunctionDescription<{
      encode([newThreshold]: [BigNumberish]): string;
    }>;

    adminAddRelayer: TypedFunctionDescription<{
      encode([relayerAddress]: [string]): string;
    }>;

    adminRemoveRelayer: TypedFunctionDescription<{
      encode([relayerAddress]: [string]): string;
    }>;

    adminSetResource: TypedFunctionDescription<{
      encode([handlerAddress, resourceID, tokenAddress]: [
        string,
        Arrayish,
        string
      ]): string;
    }>;

    adminSetGenericResource: TypedFunctionDescription<{
      encode([
        handlerAddress,
        resourceID,
        contractAddress,
        depositFunctionSig,
        depositFunctionDepositerOffset,
        executeFunctionSig,
      ]: [string, Arrayish, string, Arrayish, BigNumberish, Arrayish]): string;
    }>;

    adminSetBurnable: TypedFunctionDescription<{
      encode([handlerAddress, tokenAddress]: [string, string]): string;
    }>;

    getProposal: TypedFunctionDescription<{
      encode([originChainID, depositNonce, dataHash]: [
        BigNumberish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    _totalRelayers: TypedFunctionDescription<{ encode([]: []): string }>;

    adminChangeFee: TypedFunctionDescription<{
      encode([newFee]: [BigNumberish]): string;
    }>;

    adminWithdraw: TypedFunctionDescription<{
      encode([handlerAddress, tokenAddress, recipient, amountOrTokenID]: [
        string,
        string,
        string,
        BigNumberish
      ]): string;
    }>;

    deposit: TypedFunctionDescription<{
      encode([destinationChainID, resourceID, data]: [
        BigNumberish,
        Arrayish,
        Arrayish
      ]): string;
    }>;

    voteProposal: TypedFunctionDescription<{
      encode([chainID, depositNonce, resourceID, dataHash]: [
        BigNumberish,
        BigNumberish,
        Arrayish,
        Arrayish
      ]): string;
    }>;

    cancelProposal: TypedFunctionDescription<{
      encode([chainID, depositNonce, dataHash]: [
        BigNumberish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    executeProposal: TypedFunctionDescription<{
      encode([chainID, depositNonce, data, resourceID]: [
        BigNumberish,
        BigNumberish,
        Arrayish,
        Arrayish
      ]): string;
    }>;

    transferFunds: TypedFunctionDescription<{
      encode([addrs, amounts]: [string[], BigNumberish[]]): string;
    }>;
  };

  events: {
    Deposit: TypedEventDescription<{
      encodeTopics([destinationChainID, resourceID, depositNonce]: [
        null,
        null,
        null
      ]): string[];
    }>;

    Paused: TypedEventDescription<{
      encodeTopics([account]: [null]): string[];
    }>;

    ProposalEvent: TypedEventDescription<{
      encodeTopics([originChainID, depositNonce, status, dataHash]: [
        null,
        null,
        null,
        null
      ]): string[];
    }>;

    ProposalVote: TypedEventDescription<{
      encodeTopics([originChainID, depositNonce, status, dataHash]: [
        null,
        null,
        null,
        null
      ]): string[];
    }>;

    RelayerAdded: TypedEventDescription<{
      encodeTopics([relayer]: [null]): string[];
    }>;

    RelayerRemoved: TypedEventDescription<{
      encodeTopics([relayer]: [null]): string[];
    }>;

    RelayerThresholdChanged: TypedEventDescription<{
      encodeTopics([newThreshold]: [null]): string[];
    }>;

    RoleGranted: TypedEventDescription<{
      encodeTopics([role, account, sender]: [
        Arrayish | null,
        string | null,
        string | null
      ]): string[];
    }>;

    RoleRevoked: TypedEventDescription<{
      encodeTopics([role, account, sender]: [
        Arrayish | null,
        string | null,
        string | null
      ]): string[];
    }>;

    Unpaused: TypedEventDescription<{
      encodeTopics([account]: [null]): string[];
    }>;
  };
}

export class Bridge extends Contract {
  connect(signerOrProvider: Signer | Provider | string): Bridge;
  attach(addressOrName: string): Bridge;
  deployed(): Promise<Bridge>;

  on(event: EventFilter | string, listener: Listener): Bridge;
  once(event: EventFilter | string, listener: Listener): Bridge;
  addListener(eventName: EventFilter | string, listener: Listener): Bridge;
  removeAllListeners(eventName: EventFilter | string): Bridge;
  removeListener(eventName: any, listener: Listener): Bridge;

  interface: BridgeInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: TransactionOverrides): Promise<string>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: TransactionOverrides): Promise<string>;

    MAX_RELAYERS(overrides?: TransactionOverrides): Promise<BigNumber>;

    "MAX_RELAYERS()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    RELAYER_ROLE(overrides?: TransactionOverrides): Promise<string>;

    "RELAYER_ROLE()"(overrides?: TransactionOverrides): Promise<string>;

    _chainID(overrides?: TransactionOverrides): Promise<number>;

    "_chainID()"(overrides?: TransactionOverrides): Promise<number>;

    _depositCounts(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "_depositCounts(uint8)"(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    _expiry(overrides?: TransactionOverrides): Promise<number>;

    "_expiry()"(overrides?: TransactionOverrides): Promise<number>;

    _fee(overrides?: TransactionOverrides): Promise<BigNumber>;

    "_fee()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    _relayerThreshold(overrides?: TransactionOverrides): Promise<number>;

    "_relayerThreshold()"(overrides?: TransactionOverrides): Promise<number>;

    _resourceIDToHandlerAddress(
      arg0: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    "_resourceIDToHandlerAddress(bytes32)"(
      arg0: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(
      role: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    "getRoleAdmin(bytes32)"(
      role: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    /**
     * Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.
     */
    getRoleMember(
      role: Arrayish,
      index: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    /**
     * Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.
     */
    "getRoleMember(bytes32,uint256)"(
      role: Arrayish,
      index: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    /**
     * Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.
     */
    getRoleMemberCount(
      role: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.
     */
    "getRoleMemberCount(bytes32)"(
      role: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the index of the account that have `role`.
     */
    getRoleMemberIndex(
      role: Arrayish,
      account: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the index of the account that have `role`.
     */
    "getRoleMemberIndex(bytes32,address)"(
      role: Arrayish,
      account: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    grantRole(
      role: Arrayish,
      account: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    "grantRole(bytes32,address)"(
      role: Arrayish,
      account: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: Arrayish,
      account: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    "hasRole(bytes32,address)"(
      role: Arrayish,
      account: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    /**
     * Returns true if the contract is paused, and false otherwise.
     */
    paused(overrides?: TransactionOverrides): Promise<boolean>;

    /**
     * Returns true if the contract is paused, and false otherwise.
     */
    "paused()"(overrides?: TransactionOverrides): Promise<boolean>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    renounceRole(
      role: Arrayish,
      account: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    "renounceRole(bytes32,address)"(
      role: Arrayish,
      account: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    revokeRole(
      role: Arrayish,
      account: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    "revokeRole(bytes32,address)"(
      role: Arrayish,
      account: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Returns true if {relayer} has voted on {destNonce} {dataHash} proposal.Naming left unchanged for backward compatibility.
     * @param dataHash Hash of data to be provided when deposit proposal is executed.
     * @param destNonce destinationChainID + depositNonce of the proposal.
     * @param relayer Address to check.
     */
    _hasVotedOnProposal(
      destNonce: BigNumberish,
      dataHash: Arrayish,
      relayer: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    /**
     * Returns true if {relayer} has voted on {destNonce} {dataHash} proposal.Naming left unchanged for backward compatibility.
     * @param dataHash Hash of data to be provided when deposit proposal is executed.
     * @param destNonce destinationChainID + depositNonce of the proposal.
     * @param relayer Address to check.
     */
    "_hasVotedOnProposal(uint72,bytes32,address)"(
      destNonce: BigNumberish,
      dataHash: Arrayish,
      relayer: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    /**
     * Returns true if {relayer} has the relayer role.
     * @param relayer Address to check.
     */
    isRelayer(
      relayer: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    /**
     * Returns true if {relayer} has the relayer role.
     * @param relayer Address to check.
     */
    "isRelayer(address)"(
      relayer: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    /**
     * Removes admin role from {msg.sender} and grants it to {newAdmin}.Only callable by an address that currently has the admin role.
     * @param newAdmin Address that admin role will be granted to.
     */
    renounceAdmin(
      newAdmin: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Removes admin role from {msg.sender} and grants it to {newAdmin}.Only callable by an address that currently has the admin role.
     * @param newAdmin Address that admin role will be granted to.
     */
    "renounceAdmin(address)"(
      newAdmin: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Pauses deposits, proposal creation and voting, and deposit executions.Only callable by an address that currently has the admin role.
     */
    adminPauseTransfers(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Pauses deposits, proposal creation and voting, and deposit executions.Only callable by an address that currently has the admin role.
     */
    "adminPauseTransfers()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Unpauses deposits, proposal creation and voting, and deposit executions.Only callable by an address that currently has the admin role.
     */
    adminUnpauseTransfers(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Unpauses deposits, proposal creation and voting, and deposit executions.Only callable by an address that currently has the admin role.
     */
    "adminUnpauseTransfers()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Modifies the number of votes required for a proposal to be considered passed.Only callable by an address that currently has the admin role.Emits {RelayerThresholdChanged} event.
     * @param newThreshold Value {_relayerThreshold} will be changed to.
     */
    adminChangeRelayerThreshold(
      newThreshold: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Modifies the number of votes required for a proposal to be considered passed.Only callable by an address that currently has the admin role.Emits {RelayerThresholdChanged} event.
     * @param newThreshold Value {_relayerThreshold} will be changed to.
     */
    "adminChangeRelayerThreshold(uint256)"(
      newThreshold: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Grants {relayerAddress} the relayer role.Only callable by an address that currently has the admin role, which is checked in grantRole().Emits {RelayerAdded} event.
     * @param relayerAddress Address of relayer to be added.
     */
    adminAddRelayer(
      relayerAddress: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Grants {relayerAddress} the relayer role.Only callable by an address that currently has the admin role, which is checked in grantRole().Emits {RelayerAdded} event.
     * @param relayerAddress Address of relayer to be added.
     */
    "adminAddRelayer(address)"(
      relayerAddress: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Removes relayer role for {relayerAddress}.Only callable by an address that currently has the admin role, which is checked in revokeRole().Emits {RelayerRemoved} event.
     * @param relayerAddress Address of relayer to be removed.
     */
    adminRemoveRelayer(
      relayerAddress: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Removes relayer role for {relayerAddress}.Only callable by an address that currently has the admin role, which is checked in revokeRole().Emits {RelayerRemoved} event.
     * @param relayerAddress Address of relayer to be removed.
     */
    "adminRemoveRelayer(address)"(
      relayerAddress: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Sets a new resource for handler contracts that use the IERCHandler interface, and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.Only callable by an address that currently has the admin role.
     * @param handlerAddress Address of handler resource will be set for.
     * @param resourceID ResourceID to be used when making deposits.
     * @param tokenAddress Address of contract to be called when a deposit is made and a deposited is executed.
     */
    adminSetResource(
      handlerAddress: string,
      resourceID: Arrayish,
      tokenAddress: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Sets a new resource for handler contracts that use the IERCHandler interface, and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.Only callable by an address that currently has the admin role.
     * @param handlerAddress Address of handler resource will be set for.
     * @param resourceID ResourceID to be used when making deposits.
     * @param tokenAddress Address of contract to be called when a deposit is made and a deposited is executed.
     */
    "adminSetResource(address,bytes32,address)"(
      handlerAddress: string,
      resourceID: Arrayish,
      tokenAddress: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Sets a new resource for handler contracts that use the IGenericHandler interface, and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.Only callable by an address that currently has the admin role.
     * @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.
     * @param handlerAddress Address of handler resource will be set for.
     * @param resourceID ResourceID to be used when making deposits.
     */
    adminSetGenericResource(
      handlerAddress: string,
      resourceID: Arrayish,
      contractAddress: string,
      depositFunctionSig: Arrayish,
      depositFunctionDepositerOffset: BigNumberish,
      executeFunctionSig: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Sets a new resource for handler contracts that use the IGenericHandler interface, and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.Only callable by an address that currently has the admin role.
     * @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.
     * @param handlerAddress Address of handler resource will be set for.
     * @param resourceID ResourceID to be used when making deposits.
     */
    "adminSetGenericResource(address,bytes32,address,bytes4,uint256,bytes4)"(
      handlerAddress: string,
      resourceID: Arrayish,
      contractAddress: string,
      depositFunctionSig: Arrayish,
      depositFunctionDepositerOffset: BigNumberish,
      executeFunctionSig: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Sets a resource as burnable for handler contracts that use the IERCHandler interface.Only callable by an address that currently has the admin role.
     * @param handlerAddress Address of handler resource will be set for.
     * @param tokenAddress Address of contract to be called when a deposit is made and a deposited is executed.
     */
    adminSetBurnable(
      handlerAddress: string,
      tokenAddress: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Sets a resource as burnable for handler contracts that use the IERCHandler interface.Only callable by an address that currently has the admin role.
     * @param handlerAddress Address of handler resource will be set for.
     * @param tokenAddress Address of contract to be called when a deposit is made and a deposited is executed.
     */
    "adminSetBurnable(address,address)"(
      handlerAddress: string,
      tokenAddress: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Returns a proposal.
     * @param dataHash Hash of data to be provided when deposit proposal is executed.
     * @param depositNonce ID of proposal generated by proposal's origin Bridge contract.
     * @param originChainID Chain ID deposit originated from.
     */
    getProposal(
      originChainID: BigNumberish,
      depositNonce: BigNumberish,
      dataHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<{
      _status: number;
      _yesVotes: BigNumber;
      _yesVotesTotal: number;
      _proposedBlock: number;
      0: number;
      1: BigNumber;
      2: number;
      3: number;
    }>;

    /**
     * Returns a proposal.
     * @param dataHash Hash of data to be provided when deposit proposal is executed.
     * @param depositNonce ID of proposal generated by proposal's origin Bridge contract.
     * @param originChainID Chain ID deposit originated from.
     */
    "getProposal(uint8,uint64,bytes32)"(
      originChainID: BigNumberish,
      depositNonce: BigNumberish,
      dataHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<{
      _status: number;
      _yesVotes: BigNumber;
      _yesVotesTotal: number;
      _proposedBlock: number;
      0: number;
      1: BigNumber;
      2: number;
      3: number;
    }>;

    /**
     * Returns total relayers number.Added for backwards compatibility.
     */
    _totalRelayers(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Returns total relayers number.Added for backwards compatibility.
     */
    "_totalRelayers()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Changes deposit fee.Only callable by admin.
     * @param newFee Value {_fee} will be updated to.
     */
    adminChangeFee(
      newFee: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Changes deposit fee.Only callable by admin.
     * @param newFee Value {_fee} will be updated to.
     */
    "adminChangeFee(uint256)"(
      newFee: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Used to manually withdraw funds from ERC safes.
     * @param amountOrTokenID Either the amount of ERC20 tokens or the ERC721 token ID to withdraw.
     * @param handlerAddress Address of handler to withdraw from.
     * @param recipient Address to withdraw tokens to.
     * @param tokenAddress Address of token to withdraw.
     */
    adminWithdraw(
      handlerAddress: string,
      tokenAddress: string,
      recipient: string,
      amountOrTokenID: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Used to manually withdraw funds from ERC safes.
     * @param amountOrTokenID Either the amount of ERC20 tokens or the ERC721 token ID to withdraw.
     * @param handlerAddress Address of handler to withdraw from.
     * @param recipient Address to withdraw tokens to.
     * @param tokenAddress Address of token to withdraw.
     */
    "adminWithdraw(address,address,address,uint256)"(
      handlerAddress: string,
      tokenAddress: string,
      recipient: string,
      amountOrTokenID: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Initiates a transfer using a specified handler contract.Only callable when Bridge is not paused.Emits {Deposit} event.
     * @param data Additional data to be passed to specified handler.
     * @param destinationChainID ID of chain deposit will be bridged to.
     * @param resourceID ResourceID used to find address of handler to be used for deposit.
     */
    deposit(
      destinationChainID: BigNumberish,
      resourceID: Arrayish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Initiates a transfer using a specified handler contract.Only callable when Bridge is not paused.Emits {Deposit} event.
     * @param data Additional data to be passed to specified handler.
     * @param destinationChainID ID of chain deposit will be bridged to.
     * @param resourceID ResourceID used to find address of handler to be used for deposit.
     */
    "deposit(uint8,bytes32,bytes)"(
      destinationChainID: BigNumberish,
      resourceID: Arrayish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * When called, {msg.sender} will be marked as voting in favor of proposal.Only callable by relayers when Bridge is not paused.Proposal must not have already been passed or executed.{msg.sender} must not have already voted on proposal.Emits {ProposalEvent} event with status indicating the proposal status.Emits {ProposalVote} event.
     * @param chainID ID of chain deposit originated from.
     * @param dataHash Hash of data provided when deposit was made.
     * @param depositNonce ID of deposited generated by origin Bridge contract.
     */
    voteProposal(
      chainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: Arrayish,
      dataHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * When called, {msg.sender} will be marked as voting in favor of proposal.Only callable by relayers when Bridge is not paused.Proposal must not have already been passed or executed.{msg.sender} must not have already voted on proposal.Emits {ProposalEvent} event with status indicating the proposal status.Emits {ProposalVote} event.
     * @param chainID ID of chain deposit originated from.
     * @param dataHash Hash of data provided when deposit was made.
     * @param depositNonce ID of deposited generated by origin Bridge contract.
     */
    "voteProposal(uint8,uint64,bytes32,bytes32)"(
      chainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: Arrayish,
      dataHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Cancels a deposit proposal that has not been executed yet.Only callable by relayers when Bridge is not paused.Proposal must be past expiry threshold.Emits {ProposalEvent} event with status {Cancelled}.
     * @param chainID ID of chain deposit originated from.
     * @param dataHash Hash of data originally provided when deposit was made.
     * @param depositNonce ID of deposited generated by origin Bridge contract.
     */
    cancelProposal(
      chainID: BigNumberish,
      depositNonce: BigNumberish,
      dataHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Cancels a deposit proposal that has not been executed yet.Only callable by relayers when Bridge is not paused.Proposal must be past expiry threshold.Emits {ProposalEvent} event with status {Cancelled}.
     * @param chainID ID of chain deposit originated from.
     * @param dataHash Hash of data originally provided when deposit was made.
     * @param depositNonce ID of deposited generated by origin Bridge contract.
     */
    "cancelProposal(uint8,uint64,bytes32)"(
      chainID: BigNumberish,
      depositNonce: BigNumberish,
      dataHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Executes a deposit proposal that is considered passed using a specified handler contract.Only callable by relayers when Bridge is not paused.Proposal must have Passed status.Hash of {data} must equal proposal's {dataHash}.Emits {ProposalEvent} event with status {Executed}.
     * @param chainID ID of chain deposit originated from.
     * @param data Data originally provided when deposit was made.
     * @param depositNonce ID of deposited generated by origin Bridge contract.
     * @param resourceID ResourceID to be used when making deposits.
     */
    executeProposal(
      chainID: BigNumberish,
      depositNonce: BigNumberish,
      data: Arrayish,
      resourceID: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Executes a deposit proposal that is considered passed using a specified handler contract.Only callable by relayers when Bridge is not paused.Proposal must have Passed status.Hash of {data} must equal proposal's {dataHash}.Emits {ProposalEvent} event with status {Executed}.
     * @param chainID ID of chain deposit originated from.
     * @param data Data originally provided when deposit was made.
     * @param depositNonce ID of deposited generated by origin Bridge contract.
     * @param resourceID ResourceID to be used when making deposits.
     */
    "executeProposal(uint8,uint64,bytes,bytes32)"(
      chainID: BigNumberish,
      depositNonce: BigNumberish,
      data: Arrayish,
      resourceID: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Transfers eth in the contract to the specified addresses. The parameters addrs and amounts are mapped 1-1. This means that the address at index 0 for addrs will receive the amount (in WEI) from amounts at index 0.
     * @param addrs Array of addresses to transfer {amounts} to.
     * @param amounts Array of amonuts to transfer to {addrs}.
     */
    transferFunds(
      addrs: string[],
      amounts: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Transfers eth in the contract to the specified addresses. The parameters addrs and amounts are mapped 1-1. This means that the address at index 0 for addrs will receive the amount (in WEI) from amounts at index 0.
     * @param addrs Array of addresses to transfer {amounts} to.
     * @param amounts Array of amonuts to transfer to {addrs}.
     */
    "transferFunds(address[],uint256[])"(
      addrs: string[],
      amounts: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: TransactionOverrides): Promise<string>;

  "DEFAULT_ADMIN_ROLE()"(overrides?: TransactionOverrides): Promise<string>;

  MAX_RELAYERS(overrides?: TransactionOverrides): Promise<BigNumber>;

  "MAX_RELAYERS()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  RELAYER_ROLE(overrides?: TransactionOverrides): Promise<string>;

  "RELAYER_ROLE()"(overrides?: TransactionOverrides): Promise<string>;

  _chainID(overrides?: TransactionOverrides): Promise<number>;

  "_chainID()"(overrides?: TransactionOverrides): Promise<number>;

  _depositCounts(
    arg0: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "_depositCounts(uint8)"(
    arg0: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  _expiry(overrides?: TransactionOverrides): Promise<number>;

  "_expiry()"(overrides?: TransactionOverrides): Promise<number>;

  _fee(overrides?: TransactionOverrides): Promise<BigNumber>;

  "_fee()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  _relayerThreshold(overrides?: TransactionOverrides): Promise<number>;

  "_relayerThreshold()"(overrides?: TransactionOverrides): Promise<number>;

  _resourceIDToHandlerAddress(
    arg0: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  "_resourceIDToHandlerAddress(bytes32)"(
    arg0: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  /**
   * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
   */
  getRoleAdmin(
    role: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  /**
   * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
   */
  "getRoleAdmin(bytes32)"(
    role: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  /**
   * Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.
   */
  getRoleMember(
    role: Arrayish,
    index: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  /**
   * Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.
   */
  "getRoleMember(bytes32,uint256)"(
    role: Arrayish,
    index: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  /**
   * Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.
   */
  getRoleMemberCount(
    role: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  /**
   * Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.
   */
  "getRoleMemberCount(bytes32)"(
    role: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  /**
   * Returns the index of the account that have `role`.
   */
  getRoleMemberIndex(
    role: Arrayish,
    account: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  /**
   * Returns the index of the account that have `role`.
   */
  "getRoleMemberIndex(bytes32,address)"(
    role: Arrayish,
    account: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  /**
   * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
   */
  grantRole(
    role: Arrayish,
    account: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
   */
  "grantRole(bytes32,address)"(
    role: Arrayish,
    account: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Returns `true` if `account` has been granted `role`.
   */
  hasRole(
    role: Arrayish,
    account: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  /**
   * Returns `true` if `account` has been granted `role`.
   */
  "hasRole(bytes32,address)"(
    role: Arrayish,
    account: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  /**
   * Returns true if the contract is paused, and false otherwise.
   */
  paused(overrides?: TransactionOverrides): Promise<boolean>;

  /**
   * Returns true if the contract is paused, and false otherwise.
   */
  "paused()"(overrides?: TransactionOverrides): Promise<boolean>;

  /**
   * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
   */
  renounceRole(
    role: Arrayish,
    account: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
   */
  "renounceRole(bytes32,address)"(
    role: Arrayish,
    account: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
   */
  revokeRole(
    role: Arrayish,
    account: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
   */
  "revokeRole(bytes32,address)"(
    role: Arrayish,
    account: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Returns true if {relayer} has voted on {destNonce} {dataHash} proposal.Naming left unchanged for backward compatibility.
   * @param dataHash Hash of data to be provided when deposit proposal is executed.
   * @param destNonce destinationChainID + depositNonce of the proposal.
   * @param relayer Address to check.
   */
  _hasVotedOnProposal(
    destNonce: BigNumberish,
    dataHash: Arrayish,
    relayer: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  /**
   * Returns true if {relayer} has voted on {destNonce} {dataHash} proposal.Naming left unchanged for backward compatibility.
   * @param dataHash Hash of data to be provided when deposit proposal is executed.
   * @param destNonce destinationChainID + depositNonce of the proposal.
   * @param relayer Address to check.
   */
  "_hasVotedOnProposal(uint72,bytes32,address)"(
    destNonce: BigNumberish,
    dataHash: Arrayish,
    relayer: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  /**
   * Returns true if {relayer} has the relayer role.
   * @param relayer Address to check.
   */
  isRelayer(
    relayer: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  /**
   * Returns true if {relayer} has the relayer role.
   * @param relayer Address to check.
   */
  "isRelayer(address)"(
    relayer: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  /**
   * Removes admin role from {msg.sender} and grants it to {newAdmin}.Only callable by an address that currently has the admin role.
   * @param newAdmin Address that admin role will be granted to.
   */
  renounceAdmin(
    newAdmin: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Removes admin role from {msg.sender} and grants it to {newAdmin}.Only callable by an address that currently has the admin role.
   * @param newAdmin Address that admin role will be granted to.
   */
  "renounceAdmin(address)"(
    newAdmin: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Pauses deposits, proposal creation and voting, and deposit executions.Only callable by an address that currently has the admin role.
   */
  adminPauseTransfers(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Pauses deposits, proposal creation and voting, and deposit executions.Only callable by an address that currently has the admin role.
   */
  "adminPauseTransfers()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Unpauses deposits, proposal creation and voting, and deposit executions.Only callable by an address that currently has the admin role.
   */
  adminUnpauseTransfers(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Unpauses deposits, proposal creation and voting, and deposit executions.Only callable by an address that currently has the admin role.
   */
  "adminUnpauseTransfers()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Modifies the number of votes required for a proposal to be considered passed.Only callable by an address that currently has the admin role.Emits {RelayerThresholdChanged} event.
   * @param newThreshold Value {_relayerThreshold} will be changed to.
   */
  adminChangeRelayerThreshold(
    newThreshold: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Modifies the number of votes required for a proposal to be considered passed.Only callable by an address that currently has the admin role.Emits {RelayerThresholdChanged} event.
   * @param newThreshold Value {_relayerThreshold} will be changed to.
   */
  "adminChangeRelayerThreshold(uint256)"(
    newThreshold: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Grants {relayerAddress} the relayer role.Only callable by an address that currently has the admin role, which is checked in grantRole().Emits {RelayerAdded} event.
   * @param relayerAddress Address of relayer to be added.
   */
  adminAddRelayer(
    relayerAddress: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Grants {relayerAddress} the relayer role.Only callable by an address that currently has the admin role, which is checked in grantRole().Emits {RelayerAdded} event.
   * @param relayerAddress Address of relayer to be added.
   */
  "adminAddRelayer(address)"(
    relayerAddress: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Removes relayer role for {relayerAddress}.Only callable by an address that currently has the admin role, which is checked in revokeRole().Emits {RelayerRemoved} event.
   * @param relayerAddress Address of relayer to be removed.
   */
  adminRemoveRelayer(
    relayerAddress: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Removes relayer role for {relayerAddress}.Only callable by an address that currently has the admin role, which is checked in revokeRole().Emits {RelayerRemoved} event.
   * @param relayerAddress Address of relayer to be removed.
   */
  "adminRemoveRelayer(address)"(
    relayerAddress: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Sets a new resource for handler contracts that use the IERCHandler interface, and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.Only callable by an address that currently has the admin role.
   * @param handlerAddress Address of handler resource will be set for.
   * @param resourceID ResourceID to be used when making deposits.
   * @param tokenAddress Address of contract to be called when a deposit is made and a deposited is executed.
   */
  adminSetResource(
    handlerAddress: string,
    resourceID: Arrayish,
    tokenAddress: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Sets a new resource for handler contracts that use the IERCHandler interface, and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.Only callable by an address that currently has the admin role.
   * @param handlerAddress Address of handler resource will be set for.
   * @param resourceID ResourceID to be used when making deposits.
   * @param tokenAddress Address of contract to be called when a deposit is made and a deposited is executed.
   */
  "adminSetResource(address,bytes32,address)"(
    handlerAddress: string,
    resourceID: Arrayish,
    tokenAddress: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Sets a new resource for handler contracts that use the IGenericHandler interface, and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.Only callable by an address that currently has the admin role.
   * @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.
   * @param handlerAddress Address of handler resource will be set for.
   * @param resourceID ResourceID to be used when making deposits.
   */
  adminSetGenericResource(
    handlerAddress: string,
    resourceID: Arrayish,
    contractAddress: string,
    depositFunctionSig: Arrayish,
    depositFunctionDepositerOffset: BigNumberish,
    executeFunctionSig: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Sets a new resource for handler contracts that use the IGenericHandler interface, and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.Only callable by an address that currently has the admin role.
   * @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.
   * @param handlerAddress Address of handler resource will be set for.
   * @param resourceID ResourceID to be used when making deposits.
   */
  "adminSetGenericResource(address,bytes32,address,bytes4,uint256,bytes4)"(
    handlerAddress: string,
    resourceID: Arrayish,
    contractAddress: string,
    depositFunctionSig: Arrayish,
    depositFunctionDepositerOffset: BigNumberish,
    executeFunctionSig: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Sets a resource as burnable for handler contracts that use the IERCHandler interface.Only callable by an address that currently has the admin role.
   * @param handlerAddress Address of handler resource will be set for.
   * @param tokenAddress Address of contract to be called when a deposit is made and a deposited is executed.
   */
  adminSetBurnable(
    handlerAddress: string,
    tokenAddress: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Sets a resource as burnable for handler contracts that use the IERCHandler interface.Only callable by an address that currently has the admin role.
   * @param handlerAddress Address of handler resource will be set for.
   * @param tokenAddress Address of contract to be called when a deposit is made and a deposited is executed.
   */
  "adminSetBurnable(address,address)"(
    handlerAddress: string,
    tokenAddress: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Returns a proposal.
   * @param dataHash Hash of data to be provided when deposit proposal is executed.
   * @param depositNonce ID of proposal generated by proposal's origin Bridge contract.
   * @param originChainID Chain ID deposit originated from.
   */
  getProposal(
    originChainID: BigNumberish,
    depositNonce: BigNumberish,
    dataHash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<{
    _status: number;
    _yesVotes: BigNumber;
    _yesVotesTotal: number;
    _proposedBlock: number;
    0: number;
    1: BigNumber;
    2: number;
    3: number;
  }>;

  /**
   * Returns a proposal.
   * @param dataHash Hash of data to be provided when deposit proposal is executed.
   * @param depositNonce ID of proposal generated by proposal's origin Bridge contract.
   * @param originChainID Chain ID deposit originated from.
   */
  "getProposal(uint8,uint64,bytes32)"(
    originChainID: BigNumberish,
    depositNonce: BigNumberish,
    dataHash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<{
    _status: number;
    _yesVotes: BigNumber;
    _yesVotesTotal: number;
    _proposedBlock: number;
    0: number;
    1: BigNumber;
    2: number;
    3: number;
  }>;

  /**
   * Returns total relayers number.Added for backwards compatibility.
   */
  _totalRelayers(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * Returns total relayers number.Added for backwards compatibility.
   */
  "_totalRelayers()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * Changes deposit fee.Only callable by admin.
   * @param newFee Value {_fee} will be updated to.
   */
  adminChangeFee(
    newFee: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Changes deposit fee.Only callable by admin.
   * @param newFee Value {_fee} will be updated to.
   */
  "adminChangeFee(uint256)"(
    newFee: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Used to manually withdraw funds from ERC safes.
   * @param amountOrTokenID Either the amount of ERC20 tokens or the ERC721 token ID to withdraw.
   * @param handlerAddress Address of handler to withdraw from.
   * @param recipient Address to withdraw tokens to.
   * @param tokenAddress Address of token to withdraw.
   */
  adminWithdraw(
    handlerAddress: string,
    tokenAddress: string,
    recipient: string,
    amountOrTokenID: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Used to manually withdraw funds from ERC safes.
   * @param amountOrTokenID Either the amount of ERC20 tokens or the ERC721 token ID to withdraw.
   * @param handlerAddress Address of handler to withdraw from.
   * @param recipient Address to withdraw tokens to.
   * @param tokenAddress Address of token to withdraw.
   */
  "adminWithdraw(address,address,address,uint256)"(
    handlerAddress: string,
    tokenAddress: string,
    recipient: string,
    amountOrTokenID: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Initiates a transfer using a specified handler contract.Only callable when Bridge is not paused.Emits {Deposit} event.
   * @param data Additional data to be passed to specified handler.
   * @param destinationChainID ID of chain deposit will be bridged to.
   * @param resourceID ResourceID used to find address of handler to be used for deposit.
   */
  deposit(
    destinationChainID: BigNumberish,
    resourceID: Arrayish,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Initiates a transfer using a specified handler contract.Only callable when Bridge is not paused.Emits {Deposit} event.
   * @param data Additional data to be passed to specified handler.
   * @param destinationChainID ID of chain deposit will be bridged to.
   * @param resourceID ResourceID used to find address of handler to be used for deposit.
   */
  "deposit(uint8,bytes32,bytes)"(
    destinationChainID: BigNumberish,
    resourceID: Arrayish,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * When called, {msg.sender} will be marked as voting in favor of proposal.Only callable by relayers when Bridge is not paused.Proposal must not have already been passed or executed.{msg.sender} must not have already voted on proposal.Emits {ProposalEvent} event with status indicating the proposal status.Emits {ProposalVote} event.
   * @param chainID ID of chain deposit originated from.
   * @param dataHash Hash of data provided when deposit was made.
   * @param depositNonce ID of deposited generated by origin Bridge contract.
   */
  voteProposal(
    chainID: BigNumberish,
    depositNonce: BigNumberish,
    resourceID: Arrayish,
    dataHash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * When called, {msg.sender} will be marked as voting in favor of proposal.Only callable by relayers when Bridge is not paused.Proposal must not have already been passed or executed.{msg.sender} must not have already voted on proposal.Emits {ProposalEvent} event with status indicating the proposal status.Emits {ProposalVote} event.
   * @param chainID ID of chain deposit originated from.
   * @param dataHash Hash of data provided when deposit was made.
   * @param depositNonce ID of deposited generated by origin Bridge contract.
   */
  "voteProposal(uint8,uint64,bytes32,bytes32)"(
    chainID: BigNumberish,
    depositNonce: BigNumberish,
    resourceID: Arrayish,
    dataHash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Cancels a deposit proposal that has not been executed yet.Only callable by relayers when Bridge is not paused.Proposal must be past expiry threshold.Emits {ProposalEvent} event with status {Cancelled}.
   * @param chainID ID of chain deposit originated from.
   * @param dataHash Hash of data originally provided when deposit was made.
   * @param depositNonce ID of deposited generated by origin Bridge contract.
   */
  cancelProposal(
    chainID: BigNumberish,
    depositNonce: BigNumberish,
    dataHash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Cancels a deposit proposal that has not been executed yet.Only callable by relayers when Bridge is not paused.Proposal must be past expiry threshold.Emits {ProposalEvent} event with status {Cancelled}.
   * @param chainID ID of chain deposit originated from.
   * @param dataHash Hash of data originally provided when deposit was made.
   * @param depositNonce ID of deposited generated by origin Bridge contract.
   */
  "cancelProposal(uint8,uint64,bytes32)"(
    chainID: BigNumberish,
    depositNonce: BigNumberish,
    dataHash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Executes a deposit proposal that is considered passed using a specified handler contract.Only callable by relayers when Bridge is not paused.Proposal must have Passed status.Hash of {data} must equal proposal's {dataHash}.Emits {ProposalEvent} event with status {Executed}.
   * @param chainID ID of chain deposit originated from.
   * @param data Data originally provided when deposit was made.
   * @param depositNonce ID of deposited generated by origin Bridge contract.
   * @param resourceID ResourceID to be used when making deposits.
   */
  executeProposal(
    chainID: BigNumberish,
    depositNonce: BigNumberish,
    data: Arrayish,
    resourceID: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Executes a deposit proposal that is considered passed using a specified handler contract.Only callable by relayers when Bridge is not paused.Proposal must have Passed status.Hash of {data} must equal proposal's {dataHash}.Emits {ProposalEvent} event with status {Executed}.
   * @param chainID ID of chain deposit originated from.
   * @param data Data originally provided when deposit was made.
   * @param depositNonce ID of deposited generated by origin Bridge contract.
   * @param resourceID ResourceID to be used when making deposits.
   */
  "executeProposal(uint8,uint64,bytes,bytes32)"(
    chainID: BigNumberish,
    depositNonce: BigNumberish,
    data: Arrayish,
    resourceID: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Transfers eth in the contract to the specified addresses. The parameters addrs and amounts are mapped 1-1. This means that the address at index 0 for addrs will receive the amount (in WEI) from amounts at index 0.
   * @param addrs Array of addresses to transfer {amounts} to.
   * @param amounts Array of amonuts to transfer to {addrs}.
   */
  transferFunds(
    addrs: string[],
    amounts: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Transfers eth in the contract to the specified addresses. The parameters addrs and amounts are mapped 1-1. This means that the address at index 0 for addrs will receive the amount (in WEI) from amounts at index 0.
   * @param addrs Array of addresses to transfer {amounts} to.
   * @param amounts Array of amonuts to transfer to {addrs}.
   */
  "transferFunds(address[],uint256[])"(
    addrs: string[],
    amounts: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    Deposit(
      destinationChainID: null,
      resourceID: null,
      depositNonce: null
    ): EventFilter;

    Paused(account: null): EventFilter;

    ProposalEvent(
      originChainID: null,
      depositNonce: null,
      status: null,
      dataHash: null
    ): EventFilter;

    ProposalVote(
      originChainID: null,
      depositNonce: null,
      status: null,
      dataHash: null
    ): EventFilter;

    RelayerAdded(relayer: null): EventFilter;

    RelayerRemoved(relayer: null): EventFilter;

    RelayerThresholdChanged(newThreshold: null): EventFilter;

    RoleGranted(
      role: Arrayish | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    RoleRevoked(
      role: Arrayish | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    Unpaused(account: null): EventFilter;
  };

  estimate: {
    DEFAULT_ADMIN_ROLE(overrides?: TransactionOverrides): Promise<BigNumber>;

    "DEFAULT_ADMIN_ROLE()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    MAX_RELAYERS(overrides?: TransactionOverrides): Promise<BigNumber>;

    "MAX_RELAYERS()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    RELAYER_ROLE(overrides?: TransactionOverrides): Promise<BigNumber>;

    "RELAYER_ROLE()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    _chainID(overrides?: TransactionOverrides): Promise<BigNumber>;

    "_chainID()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    _depositCounts(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "_depositCounts(uint8)"(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    _expiry(overrides?: TransactionOverrides): Promise<BigNumber>;

    "_expiry()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    _fee(overrides?: TransactionOverrides): Promise<BigNumber>;

    "_fee()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    _relayerThreshold(overrides?: TransactionOverrides): Promise<BigNumber>;

    "_relayerThreshold()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    _resourceIDToHandlerAddress(
      arg0: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "_resourceIDToHandlerAddress(bytes32)"(
      arg0: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(
      role: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    "getRoleAdmin(bytes32)"(
      role: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.
     */
    getRoleMember(
      role: Arrayish,
      index: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.
     */
    "getRoleMember(bytes32,uint256)"(
      role: Arrayish,
      index: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.
     */
    getRoleMemberCount(
      role: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.
     */
    "getRoleMemberCount(bytes32)"(
      role: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the index of the account that have `role`.
     */
    getRoleMemberIndex(
      role: Arrayish,
      account: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the index of the account that have `role`.
     */
    "getRoleMemberIndex(bytes32,address)"(
      role: Arrayish,
      account: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    grantRole(
      role: Arrayish,
      account: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    "grantRole(bytes32,address)"(
      role: Arrayish,
      account: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: Arrayish,
      account: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    "hasRole(bytes32,address)"(
      role: Arrayish,
      account: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns true if the contract is paused, and false otherwise.
     */
    paused(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Returns true if the contract is paused, and false otherwise.
     */
    "paused()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    renounceRole(
      role: Arrayish,
      account: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    "renounceRole(bytes32,address)"(
      role: Arrayish,
      account: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    revokeRole(
      role: Arrayish,
      account: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    "revokeRole(bytes32,address)"(
      role: Arrayish,
      account: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns true if {relayer} has voted on {destNonce} {dataHash} proposal.Naming left unchanged for backward compatibility.
     * @param dataHash Hash of data to be provided when deposit proposal is executed.
     * @param destNonce destinationChainID + depositNonce of the proposal.
     * @param relayer Address to check.
     */
    _hasVotedOnProposal(
      destNonce: BigNumberish,
      dataHash: Arrayish,
      relayer: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns true if {relayer} has voted on {destNonce} {dataHash} proposal.Naming left unchanged for backward compatibility.
     * @param dataHash Hash of data to be provided when deposit proposal is executed.
     * @param destNonce destinationChainID + depositNonce of the proposal.
     * @param relayer Address to check.
     */
    "_hasVotedOnProposal(uint72,bytes32,address)"(
      destNonce: BigNumberish,
      dataHash: Arrayish,
      relayer: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns true if {relayer} has the relayer role.
     * @param relayer Address to check.
     */
    isRelayer(
      relayer: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns true if {relayer} has the relayer role.
     * @param relayer Address to check.
     */
    "isRelayer(address)"(
      relayer: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Removes admin role from {msg.sender} and grants it to {newAdmin}.Only callable by an address that currently has the admin role.
     * @param newAdmin Address that admin role will be granted to.
     */
    renounceAdmin(
      newAdmin: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Removes admin role from {msg.sender} and grants it to {newAdmin}.Only callable by an address that currently has the admin role.
     * @param newAdmin Address that admin role will be granted to.
     */
    "renounceAdmin(address)"(
      newAdmin: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Pauses deposits, proposal creation and voting, and deposit executions.Only callable by an address that currently has the admin role.
     */
    adminPauseTransfers(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Pauses deposits, proposal creation and voting, and deposit executions.Only callable by an address that currently has the admin role.
     */
    "adminPauseTransfers()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Unpauses deposits, proposal creation and voting, and deposit executions.Only callable by an address that currently has the admin role.
     */
    adminUnpauseTransfers(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Unpauses deposits, proposal creation and voting, and deposit executions.Only callable by an address that currently has the admin role.
     */
    "adminUnpauseTransfers()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Modifies the number of votes required for a proposal to be considered passed.Only callable by an address that currently has the admin role.Emits {RelayerThresholdChanged} event.
     * @param newThreshold Value {_relayerThreshold} will be changed to.
     */
    adminChangeRelayerThreshold(
      newThreshold: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Modifies the number of votes required for a proposal to be considered passed.Only callable by an address that currently has the admin role.Emits {RelayerThresholdChanged} event.
     * @param newThreshold Value {_relayerThreshold} will be changed to.
     */
    "adminChangeRelayerThreshold(uint256)"(
      newThreshold: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Grants {relayerAddress} the relayer role.Only callable by an address that currently has the admin role, which is checked in grantRole().Emits {RelayerAdded} event.
     * @param relayerAddress Address of relayer to be added.
     */
    adminAddRelayer(
      relayerAddress: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Grants {relayerAddress} the relayer role.Only callable by an address that currently has the admin role, which is checked in grantRole().Emits {RelayerAdded} event.
     * @param relayerAddress Address of relayer to be added.
     */
    "adminAddRelayer(address)"(
      relayerAddress: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Removes relayer role for {relayerAddress}.Only callable by an address that currently has the admin role, which is checked in revokeRole().Emits {RelayerRemoved} event.
     * @param relayerAddress Address of relayer to be removed.
     */
    adminRemoveRelayer(
      relayerAddress: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Removes relayer role for {relayerAddress}.Only callable by an address that currently has the admin role, which is checked in revokeRole().Emits {RelayerRemoved} event.
     * @param relayerAddress Address of relayer to be removed.
     */
    "adminRemoveRelayer(address)"(
      relayerAddress: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Sets a new resource for handler contracts that use the IERCHandler interface, and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.Only callable by an address that currently has the admin role.
     * @param handlerAddress Address of handler resource will be set for.
     * @param resourceID ResourceID to be used when making deposits.
     * @param tokenAddress Address of contract to be called when a deposit is made and a deposited is executed.
     */
    adminSetResource(
      handlerAddress: string,
      resourceID: Arrayish,
      tokenAddress: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Sets a new resource for handler contracts that use the IERCHandler interface, and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.Only callable by an address that currently has the admin role.
     * @param handlerAddress Address of handler resource will be set for.
     * @param resourceID ResourceID to be used when making deposits.
     * @param tokenAddress Address of contract to be called when a deposit is made and a deposited is executed.
     */
    "adminSetResource(address,bytes32,address)"(
      handlerAddress: string,
      resourceID: Arrayish,
      tokenAddress: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Sets a new resource for handler contracts that use the IGenericHandler interface, and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.Only callable by an address that currently has the admin role.
     * @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.
     * @param handlerAddress Address of handler resource will be set for.
     * @param resourceID ResourceID to be used when making deposits.
     */
    adminSetGenericResource(
      handlerAddress: string,
      resourceID: Arrayish,
      contractAddress: string,
      depositFunctionSig: Arrayish,
      depositFunctionDepositerOffset: BigNumberish,
      executeFunctionSig: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Sets a new resource for handler contracts that use the IGenericHandler interface, and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.Only callable by an address that currently has the admin role.
     * @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.
     * @param handlerAddress Address of handler resource will be set for.
     * @param resourceID ResourceID to be used when making deposits.
     */
    "adminSetGenericResource(address,bytes32,address,bytes4,uint256,bytes4)"(
      handlerAddress: string,
      resourceID: Arrayish,
      contractAddress: string,
      depositFunctionSig: Arrayish,
      depositFunctionDepositerOffset: BigNumberish,
      executeFunctionSig: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Sets a resource as burnable for handler contracts that use the IERCHandler interface.Only callable by an address that currently has the admin role.
     * @param handlerAddress Address of handler resource will be set for.
     * @param tokenAddress Address of contract to be called when a deposit is made and a deposited is executed.
     */
    adminSetBurnable(
      handlerAddress: string,
      tokenAddress: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Sets a resource as burnable for handler contracts that use the IERCHandler interface.Only callable by an address that currently has the admin role.
     * @param handlerAddress Address of handler resource will be set for.
     * @param tokenAddress Address of contract to be called when a deposit is made and a deposited is executed.
     */
    "adminSetBurnable(address,address)"(
      handlerAddress: string,
      tokenAddress: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns a proposal.
     * @param dataHash Hash of data to be provided when deposit proposal is executed.
     * @param depositNonce ID of proposal generated by proposal's origin Bridge contract.
     * @param originChainID Chain ID deposit originated from.
     */
    getProposal(
      originChainID: BigNumberish,
      depositNonce: BigNumberish,
      dataHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns a proposal.
     * @param dataHash Hash of data to be provided when deposit proposal is executed.
     * @param depositNonce ID of proposal generated by proposal's origin Bridge contract.
     * @param originChainID Chain ID deposit originated from.
     */
    "getProposal(uint8,uint64,bytes32)"(
      originChainID: BigNumberish,
      depositNonce: BigNumberish,
      dataHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns total relayers number.Added for backwards compatibility.
     */
    _totalRelayers(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Returns total relayers number.Added for backwards compatibility.
     */
    "_totalRelayers()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Changes deposit fee.Only callable by admin.
     * @param newFee Value {_fee} will be updated to.
     */
    adminChangeFee(
      newFee: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Changes deposit fee.Only callable by admin.
     * @param newFee Value {_fee} will be updated to.
     */
    "adminChangeFee(uint256)"(
      newFee: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Used to manually withdraw funds from ERC safes.
     * @param amountOrTokenID Either the amount of ERC20 tokens or the ERC721 token ID to withdraw.
     * @param handlerAddress Address of handler to withdraw from.
     * @param recipient Address to withdraw tokens to.
     * @param tokenAddress Address of token to withdraw.
     */
    adminWithdraw(
      handlerAddress: string,
      tokenAddress: string,
      recipient: string,
      amountOrTokenID: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Used to manually withdraw funds from ERC safes.
     * @param amountOrTokenID Either the amount of ERC20 tokens or the ERC721 token ID to withdraw.
     * @param handlerAddress Address of handler to withdraw from.
     * @param recipient Address to withdraw tokens to.
     * @param tokenAddress Address of token to withdraw.
     */
    "adminWithdraw(address,address,address,uint256)"(
      handlerAddress: string,
      tokenAddress: string,
      recipient: string,
      amountOrTokenID: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Initiates a transfer using a specified handler contract.Only callable when Bridge is not paused.Emits {Deposit} event.
     * @param data Additional data to be passed to specified handler.
     * @param destinationChainID ID of chain deposit will be bridged to.
     * @param resourceID ResourceID used to find address of handler to be used for deposit.
     */
    deposit(
      destinationChainID: BigNumberish,
      resourceID: Arrayish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Initiates a transfer using a specified handler contract.Only callable when Bridge is not paused.Emits {Deposit} event.
     * @param data Additional data to be passed to specified handler.
     * @param destinationChainID ID of chain deposit will be bridged to.
     * @param resourceID ResourceID used to find address of handler to be used for deposit.
     */
    "deposit(uint8,bytes32,bytes)"(
      destinationChainID: BigNumberish,
      resourceID: Arrayish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * When called, {msg.sender} will be marked as voting in favor of proposal.Only callable by relayers when Bridge is not paused.Proposal must not have already been passed or executed.{msg.sender} must not have already voted on proposal.Emits {ProposalEvent} event with status indicating the proposal status.Emits {ProposalVote} event.
     * @param chainID ID of chain deposit originated from.
     * @param dataHash Hash of data provided when deposit was made.
     * @param depositNonce ID of deposited generated by origin Bridge contract.
     */
    voteProposal(
      chainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: Arrayish,
      dataHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * When called, {msg.sender} will be marked as voting in favor of proposal.Only callable by relayers when Bridge is not paused.Proposal must not have already been passed or executed.{msg.sender} must not have already voted on proposal.Emits {ProposalEvent} event with status indicating the proposal status.Emits {ProposalVote} event.
     * @param chainID ID of chain deposit originated from.
     * @param dataHash Hash of data provided when deposit was made.
     * @param depositNonce ID of deposited generated by origin Bridge contract.
     */
    "voteProposal(uint8,uint64,bytes32,bytes32)"(
      chainID: BigNumberish,
      depositNonce: BigNumberish,
      resourceID: Arrayish,
      dataHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Cancels a deposit proposal that has not been executed yet.Only callable by relayers when Bridge is not paused.Proposal must be past expiry threshold.Emits {ProposalEvent} event with status {Cancelled}.
     * @param chainID ID of chain deposit originated from.
     * @param dataHash Hash of data originally provided when deposit was made.
     * @param depositNonce ID of deposited generated by origin Bridge contract.
     */
    cancelProposal(
      chainID: BigNumberish,
      depositNonce: BigNumberish,
      dataHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Cancels a deposit proposal that has not been executed yet.Only callable by relayers when Bridge is not paused.Proposal must be past expiry threshold.Emits {ProposalEvent} event with status {Cancelled}.
     * @param chainID ID of chain deposit originated from.
     * @param dataHash Hash of data originally provided when deposit was made.
     * @param depositNonce ID of deposited generated by origin Bridge contract.
     */
    "cancelProposal(uint8,uint64,bytes32)"(
      chainID: BigNumberish,
      depositNonce: BigNumberish,
      dataHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Executes a deposit proposal that is considered passed using a specified handler contract.Only callable by relayers when Bridge is not paused.Proposal must have Passed status.Hash of {data} must equal proposal's {dataHash}.Emits {ProposalEvent} event with status {Executed}.
     * @param chainID ID of chain deposit originated from.
     * @param data Data originally provided when deposit was made.
     * @param depositNonce ID of deposited generated by origin Bridge contract.
     * @param resourceID ResourceID to be used when making deposits.
     */
    executeProposal(
      chainID: BigNumberish,
      depositNonce: BigNumberish,
      data: Arrayish,
      resourceID: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Executes a deposit proposal that is considered passed using a specified handler contract.Only callable by relayers when Bridge is not paused.Proposal must have Passed status.Hash of {data} must equal proposal's {dataHash}.Emits {ProposalEvent} event with status {Executed}.
     * @param chainID ID of chain deposit originated from.
     * @param data Data originally provided when deposit was made.
     * @param depositNonce ID of deposited generated by origin Bridge contract.
     * @param resourceID ResourceID to be used when making deposits.
     */
    "executeProposal(uint8,uint64,bytes,bytes32)"(
      chainID: BigNumberish,
      depositNonce: BigNumberish,
      data: Arrayish,
      resourceID: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Transfers eth in the contract to the specified addresses. The parameters addrs and amounts are mapped 1-1. This means that the address at index 0 for addrs will receive the amount (in WEI) from amounts at index 0.
     * @param addrs Array of addresses to transfer {amounts} to.
     * @param amounts Array of amonuts to transfer to {addrs}.
     */
    transferFunds(
      addrs: string[],
      amounts: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Transfers eth in the contract to the specified addresses. The parameters addrs and amounts are mapped 1-1. This means that the address at index 0 for addrs will receive the amount (in WEI) from amounts at index 0.
     * @param addrs Array of addresses to transfer {amounts} to.
     * @param amounts Array of amonuts to transfer to {addrs}.
     */
    "transferFunds(address[],uint256[])"(
      addrs: string[],
      amounts: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
